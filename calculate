#!/usr/bin/env python3

# built-in imports
import argparse
import logging

# custom imports
import calculator
import calculator_ui
import client

LOG = logging.getLogger(__name__)
LOG_FILE = "calculator_log.txt"
LOG_FORMAT = "%(filename)-18s:%(lineno)d %(levelname)s - %(message)s"


def create_logger(log_file):
    logging.basicConfig(
        filename=log_file,
        level=logging.DEBUG,
        format=f"[%(asctime)s] {LOG_FORMAT}",
        datefmt="%H:%M:%S",
    )
    root_logger = logging.getLogger("")
    root_logger.setLevel(logging.DEBUG)

    formatter = logging.Formatter(LOG_FORMAT)
    console = logging.StreamHandler()
    console.setFormatter(formatter)
    root_logger.addHandler(console)


def parse_args():
    desc = "Simple Python calculator."
    parser = argparse.ArgumentParser(
        prog="Calculator",
        description=desc,
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument(
        "--input",
        "-i",
        type=str,
        required=False,
        help="Arithmetic equation to solve.\n",
    )
    parser.add_argument(
        "-ip",
        nargs="?",
        const="0.0.0.0",
        type=str,
        help="IP address to connect. If only flag used, defaults to '0.0.0.0'.\n",
    )
    args = parser.parse_args()
    return args


def run_client(ip):
    message = input("-> ")
    client_inst = client.Client(ip=ip)
    connected = client_inst.connect_to_host()
    if not connected:
        return False
    result = client_inst.send_to_server(message)
    return result


def main():
    """
    Launch the tool.
    """
    create_logger(LOG_FILE)

    args = parse_args()
    if args.input:
        LOG.info("- - - - - Calculator CLI - Built-In - - - - -")
        calc = calculator.Calculator()
        return calc.run(args.input)
    elif args.ip:
        LOG.info("- - - - - Calculator CLI - Server - - - - -")
        return run_client(args.ip)
    else:
        LOG.info("- - - - - Calculator Application - - - - -")
        calculator_ui.main()


if __name__ == "__main__":
    main()
